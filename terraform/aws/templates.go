// Code generated by go-bindata.
// sources:
// templates/base.tf
// templates/cf_dns.tf
// templates/cf_lb.tf
// templates/concourse_lb.tf
// templates/iso_segments.tf
// templates/lb_subnet.tf
// templates/ssl_certificate.tf
// templates/vpc.tf
// DO NOT EDIT!

package aws

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesBaseTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5b\xdd\x6f\xdb\x38\x12\x7f\x8e\xff\x0a\x42\xd8\x87\xdd\x9e\xed\xda\x8e\x13\x3b\xc1\xf6\x21\x6d\x73\x87\x1e\x7a\x7b\x45\x52\xec\xc3\x15\x85\x40\x51\x94\xcc\x8b\x24\x0a\x24\xe5\xd4\x0d\xfc\xbf\x1f\xf8\xa5\x6f\xd9\x56\x9a\x34\xde\xeb\x02\xdb\x9a\x33\x9c\x19\xfe\x38\x9c\x19\xf1\x83\x61\x4e\x33\x86\x30\x70\xe0\x3d\x77\x31\x49\x1d\xe0\xfc\x37\x8b\x53\x8f\x7e\xd3\xbf\x1e\x06\x00\xf8\x38\xc5\x89\xcf\x5d\x9a\x80\x37\xe0\x8b\xe2\x24\x89\xc0\x2c\xc1\xc2\x0d\xa1\xc0\xf7\x70\x33\x26\xa1\xf3\x75\x00\xc0\x3a\x45\xc0\xfc\x79\x03\x04\xcb\xf0\x60\x3b\x18\x14\x4a\x44\xc4\xdd\x94\x91\x35\x14\xd8\xbd\xc3\x1b\x07\x38\x1e\xe5\x2b\x77\x1d\x73\xad\x09\x46\x21\x65\x44\xac\x62\xf0\x06\x38\x37\xb7\x57\xce\x00\x00\xc6\xa1\xeb\x11\xc1\xa5\xc4\xf9\xe4\xe2\xbc\x2a\x51\x1a\x73\x87\x37\x6e\x0a\x09\x6b\x88\x93\x84\x04\xc6\x58\x59\xe3\xfc\xf2\xb0\x86\x6c\x8c\x93\xb5\x4b\xfc\xad\x9b\x73\x0e\x00\x48\x33\x2f\x22\x48\xca\xd1\x7c\x35\x33\xc7\x96\x77\x5c\x30\xba\x34\xc5\x09\xe7\xab\xad\x23\xed\xa1\x99\x48\x33\x51\xa8\x77\xad\x66\x6d\xc7\x1a\x46\x19\xd6\xa2\xcb\xf6\x16\x72\x2d\x7b\x87\xb4\x0a\x64\x85\x40\x60\xc7\xd5\x6d\x6f\xd1\xe8\xa6\x38\xde\xca\xc1\x72\x9c\x70\x22\xc8\x1a\x97\x66\xc8\x6a\xc4\xdf\xe4\xb4\xc2\xc8\xb5\x53\x5f\xb3\x1c\x93\x74\x5c\x72\x0f\x8b\x07\x49\xab\x86\x5b\x96\x8c\x45\x3d\xc5\x5c\xce\x66\x15\x49\x3e\x61\x18\x09\xca\x5c\xe8\xfb\x0c\x73\x5e\x13\xb7\x12\x22\xe5\x97\xaf\x5f\xef\x17\x7b\x76\x76\x76\xe6\x34\x5d\x87\xc0\xd8\x65\x34\xc2\xc6\x75\xb4\x78\xe5\x32\xed\x0e\xa3\x78\xa5\xc7\x40\xb1\x92\x2c\xaf\x9d\xc1\x00\x80\x88\x04\x18\x6d\x50\x84\x55\x77\x00\x10\xc3\x12\x75\x0f\x07\x94\x61\xd7\xc7\x5c\x30\xba\xb1\x70\x03\xb0\x95\x7d\x20\xe7\x59\x8c\x95\x40\x37\xa5\x11\x41\x92\xe1\xf7\xdf\xaf\xff\xfd\xf7\x81\x14\xe2\xfc\x89\x19\x27\x34\x71\x2e\x81\x33\x9b\x4c\x67\xa3\xe9\x64\x34\x5d\x38\x43\x49\xba\x15\x50\xe0\x18\x27\xc2\xb9\x04\x5f\x94\x42\xad\x16\x00\xe7\x0a\x09\xd3\x89\x0b\x7e\x79\xa5\x74\xdc\x48\x9b\x87\x96\xe3\x13\x23\x09\x22\x29\x8c\x9c\xcb\xbc\x9b\x94\x89\xd9\x9a\x20\x2c\x7b\x62\x34\x1b\xc3\x18\x7e\xa7\x09\xbc\xe7\x63\x44\x63\xc7\xb0\x6d\x73\x21\xd7\x41\x80\x91\x54\xef\x5c\x45\x11\xbd\x2f\xa4\xdf\x12\x5f\xb6\xea\x1e\xdb\x01\x00\x5f\x07\xdb\x81\x1c\x53\x2b\xf2\x7a\xdc\x87\x62\x6f\xb8\x1b\xe8\x3f\x03\x7a\x5f\x0a\x60\x30\x9a\x49\x1c\x29\x22\x50\xe0\x2b\xe3\x85\xc3\x1a\x5d\x08\x88\x56\x7f\xd2\x28\x8b\x71\x9d\xf6\x8e\xa6\x9b\x0f\x31\x0c\x9b\x04\xe5\x24\xed\x9d\xde\xe3\x08\x0b\x7c\x9b\xc0\x94\xaf\xa8\x68\xa7\x76\xf5\xe4\x88\x11\xcf\x5a\x8a\x1b\xb6\xe6\x0c\x6b\x48\x22\xe8\x91\x88\x88\xcd\x7f\x68\xd2\xcd\xa8\x8c\xef\xa6\x26\x5c\xc0\x04\x75\x33\xdc\xe0\x90\xd0\xa4\x93\x7c\x8b\x51\xc6\x88\xd8\xfc\x83\xd1\x2c\xed\xe6\x32\x48\x74\x33\x64\x5e\x82\xbb\xc9\x1a\xab\x16\xf2\x8e\x79\x53\xd3\xd3\x35\x05\x9a\xfa\x19\x86\x0d\x99\xff\xa2\x3e\x09\x36\x16\x96\x2b\x21\x18\xf1\x32\xd1\x10\x7f\x93\x25\x9d\xd0\x7d\xc6\x2c\x26\x09\x14\xdd\xe0\x4a\x50\xb9\xc0\xac\xd5\xb1\xde\x63\x56\x21\x0f\x4e\x00\xf8\x3a\x94\xff\x6f\x59\xb7\xb2\xf5\xc6\x2c\x4c\xd9\xfe\xca\x2c\xdd\xe1\xe0\xe4\x41\x11\x4b\x6b\xe2\x44\xa9\x20\x30\xbe\xfc\x04\x39\x57\x61\xa5\xaf\xec\x93\x1d\x82\x71\x04\xb9\x20\x28\xa2\xd0\xf7\x60\x04\x13\x44\x92\xf0\xf2\xd5\x23\x54\xec\x0b\x3b\xa5\x98\xeb\x42\xb5\x74\x55\x38\x28\x87\x21\xc9\x62\x30\xdd\x93\x08\x8c\x18\x96\x14\xe9\xad\x08\x6d\x2a\x13\x8f\x21\x4b\xb6\x1d\xb9\x87\x98\x19\x76\x53\x46\x03\x52\xcb\x43\xca\x88\x8a\x54\xd9\xa2\x65\x76\x54\x0b\xed\x32\x5b\x52\x70\x1b\x63\x5d\xf2\x1a\x32\x02\xbd\x08\x03\x27\x81\xc2\x85\x31\x71\x63\x68\xea\x02\xb1\x49\x95\x30\xd9\x30\x50\x25\x62\x00\xb3\x48\x80\x37\x26\x98\xc2\x74\x94\x50\x26\x56\x18\x72\x31\x9a\x4a\x4e\x18\x93\xd1\x74\xe2\x07\x68\xb9\x58\x38\x4d\x9e\x59\xce\x03\xa7\x1e\x9a\x2f\xe6\x39\x0f\xa7\x99\x58\x8d\xa6\x76\x2e\x24\xcf\x62\x8e\xa6\xcb\xf3\xa9\x57\xe5\xa9\xea\x3a\x3d\x87\xc1\x6c\x22\x93\x7e\x83\xa7\xd0\x85\x2f\xa6\xcb\xe9\xc2\xd7\x3c\x08\x8e\x10\x4e\x04\x83\x91\xd2\x66\x79\x66\xfe\xe9\x39\x5c\x9c\x6b\x1e\x9c\xb5\xf1\x5c\x60\x0f\x4f\x97\xc1\x34\xe7\xb9\xc7\xca\x94\xb2\xcd\xa7\x70\x39\xbf\x08\xce\x50\x95\x67\x56\xe1\x99\x4d\xa7\xb3\xc9\x7c\x6e\x6c\xce\xf8\xc8\x0c\xa9\xcc\xe3\xcf\xd1\x19\x0e\xd0\xac\xca\x53\x95\x13\xcc\x16\xde\x19\xbc\x58\xe4\x3c\x21\x5d\xe7\x36\x19\x1e\x74\x7a\x71\x3e\x9d\xc0\x42\x4e\x8b\xcd\xde\x72\x11\x9c\x9d\xfa\xcb\x2a\x4f\x55\xd7\xd2\x0b\x10\x5e\x06\x4a\xce\xb6\xe9\xe4\xdc\xc4\x77\x37\x94\x01\xde\xd1\xae\x54\x6f\xd4\x1f\x19\x32\x54\xa7\x32\x26\x48\xd1\x7f\x5c\x7d\x76\xf4\xf7\x84\x4b\xfc\xd2\x42\x8c\x28\x82\xd1\x58\x37\x6f\x95\xeb\x91\x24\x94\x99\x4e\x7e\x9a\xc8\x2f\x10\xac\x7f\xe9\x9f\xd2\x53\x61\xc8\x8d\x53\xfe\xd1\x56\x5b\x8c\x12\x28\x46\xd6\xa0\x91\x36\xe8\x90\xa1\xb8\x2c\x53\xcb\x55\x8e\x47\xd0\xe2\x83\x48\x37\x3f\xa8\x42\xbb\xc2\x4f\xfc\x62\xf5\x55\x49\xe3\x26\x26\x63\x3b\x3a\xb5\xd0\x8a\x48\xa4\x47\x27\x0d\x0c\x18\x95\x51\x86\x09\x45\x98\x48\x56\x6a\x7f\xdb\x96\x94\x51\x41\x11\x8d\x4c\xe7\x91\x72\x50\x44\x7c\xe6\x7a\x11\x45\x77\x0a\x33\x67\x32\x56\xff\xbd\x9e\x38\x5f\xfb\x8c\x99\xa0\x38\x7d\xe6\xc1\x9a\x99\x75\x9a\x23\x91\xca\x9b\x20\x8c\xa6\x0d\x14\x54\xd3\x13\x8d\x58\xa0\x67\x1d\x70\xe5\x4f\xf7\xe8\xeb\x6c\x02\x35\x90\xa8\xb1\xd4\x7d\xa3\x46\x3e\x3f\x3b\x3b\x3d\x93\x03\x52\x20\xd4\xc7\xbf\x63\x5c\xda\xe5\x61\xd4\x3a\xb8\x1e\xb8\x66\xfe\x31\xe2\x9a\xf9\x7f\x0d\x5c\x6d\x12\xd7\x60\x6a\x0c\xed\x67\x3f\x49\xeb\xa3\xfa\xe5\x41\x2e\x86\x15\xe5\xe2\x57\xa5\x59\x95\xcd\x7a\xbf\xc0\xfc\xbb\x58\x2c\x43\xb0\xf8\x4d\xed\x18\xe4\x75\x42\x15\x56\xe9\x7c\xb3\x71\x8c\x7d\x92\xa9\x4f\x44\x2d\x20\x0f\xd7\x15\xad\x1d\xca\xd4\x90\x72\x88\xe4\x87\xb2\x8b\x56\x18\xdd\xd9\x9e\x01\x8c\xb8\xfc\x62\x86\x31\xe9\x98\x4d\x99\x11\xe8\x5d\x96\xfe\x2a\x43\x7a\xa9\x4c\x19\x02\xd9\xc0\xd4\xc7\x87\x1e\x85\xcc\x19\x8d\x49\xd0\x01\xa1\x8f\x7b\xb5\x26\x95\xd6\xac\xa2\xb3\xe6\x75\xb2\xfe\xf0\xbe\x41\xef\x48\x31\x7a\x03\x4e\x6a\x7e\xcc\xe6\x9b\x9d\xa7\x32\xe8\xb6\x4d\x0e\xc7\xc2\xdd\xba\x49\x67\xcb\xc8\x8a\xf2\x96\x7d\x1b\x43\xaf\x6f\xfd\x14\xb5\x22\x44\x08\x73\x5e\xec\x55\xd9\x52\x91\x0b\x46\x92\xb0\xc6\xcc\x31\x62\x58\x1c\xc8\xac\x67\xb3\x93\x31\x65\x74\x4d\x7c\xcc\x14\x94\x66\x3f\x31\xb7\xa5\x98\x81\xa2\xcd\x6c\x87\x59\x0b\x0a\x96\xa2\x4d\xb1\x68\xbd\x85\xc7\x15\x9e\xd5\xb6\x20\x4d\x29\xdc\xac\x7c\xba\x08\x0f\x45\x9d\xd3\x56\xe2\xec\x2f\xa9\x3a\x02\x46\x6b\x5d\xf5\xc1\xf0\x1e\x58\x5c\xed\xad\x9e\xac\xee\x1f\x29\xa1\x3a\xec\x57\x64\x99\x75\xfb\x26\x86\x9d\x01\xb4\x2d\x39\xec\xcb\x0a\xbb\xd2\x6c\x57\x1e\x28\x25\x00\x1c\x05\x75\x7d\xcd\xad\xf1\x47\xc2\x23\xd3\xd4\x11\xc0\xd3\x99\x2d\x5f\x18\x1e\x55\x28\x1e\x01\x3e\x6d\x05\xab\x25\x36\xca\xd6\x0a\xa1\x5c\xbc\x5a\xc2\xa3\x4a\xd8\x9d\x38\xc1\x28\xa2\xf7\x79\x62\xf9\x19\x88\xe1\xdd\x80\xe9\x6f\x95\x3e\xfe\x34\xf9\x69\x60\x71\xbb\x41\xd3\x44\xa8\x18\xc0\xd3\x00\x75\xa0\x87\x15\x6c\x9f\xdf\x7d\xda\x53\xb6\xce\x66\xbb\xeb\x56\x45\xef\x5d\xb4\x9a\x73\x97\xbc\x48\xb5\xe5\xc4\xce\xdc\x54\x2b\x2f\x7a\xd6\xc1\x45\x61\xa0\xb7\xbe\x12\x8f\x66\x89\xef\x4a\x1f\xb0\xa9\xcf\x6e\x4a\x95\x5c\xe0\x80\x7c\xaa\x2b\xd4\xfd\xb9\xf4\x2d\xe5\xab\xa7\xca\xa3\x52\x67\x57\x0e\xad\xec\xf0\xf5\xc7\xb1\xa5\x5b\xaf\x6f\xb4\x96\xfe\x79\x6a\xde\xb5\x16\x7a\xdb\xf3\xf4\xa9\xb9\xc3\xd7\x0d\xa1\x3d\x5a\xe8\x79\x69\xb8\xd4\xf6\xf0\xe0\xb1\x13\x30\x45\x84\xa1\xda\x70\x3e\x5a\xdc\xce\x97\xe7\xcb\xae\xb4\xad\x49\x3f\x1d\xbb\x0c\xc2\x23\x06\x6c\x39\x9f\x9f\x76\x00\x66\x48\x2f\xe2\x6c\xc5\xf1\x79\x4a\x8e\x18\x3d\x75\x3a\xdf\xb5\x52\x0d\xed\x25\xf0\x7b\x64\x96\xef\x85\xdc\x81\x00\x1e\x80\x63\xce\x72\x1c\x1b\x53\x7d\xd7\x77\xf7\x87\xcc\x8b\xc2\xfd\x57\xd9\x07\xec\x09\xf7\x8f\x15\xfc\x7d\x63\xc3\x71\x16\xfb\xc5\x5d\xb7\xd6\xf2\x0e\x66\x82\xc6\x50\x10\x04\xa3\x68\x63\xee\xf4\xf8\xc0\xf4\x00\xde\x06\xbc\x7d\xfb\xf1\xa9\xca\x3f\x23\x75\x5f\x05\x68\x6f\x37\xf5\x2f\x02\xeb\xf5\xf9\x21\xce\x93\x6b\xeb\x5f\xe3\x55\xd4\xfd\xbf\xd4\x75\x16\x8f\x47\x55\x6f\xcf\x8c\xc8\xcb\x55\x6c\x16\x15\xc4\xb0\xbf\xca\xbc\x23\xc3\x65\xb9\x9c\xcf\xbb\x0a\x33\x4d\x7a\x6e\x5c\x6c\x0d\x76\x64\xc0\xbc\x64\xcd\x95\x5f\xd2\x0c\x8b\x3b\x9d\x4f\x0b\xcc\x71\x26\x9c\x4a\x56\x6e\xa6\xf7\x1f\x2c\x3b\x9f\x7f\x73\xe9\xe5\x4a\xcf\x27\xd9\xc3\xe8\x40\xfc\xf1\x95\xe7\xf3\x23\xfe\x72\xd5\xe7\x2e\xc4\x1b\x9b\x7b\xc5\x9e\x5b\xbd\x0a\xd9\x75\xc0\xdc\x3a\x7d\x8a\x29\xaf\x5c\xcd\xaf\x87\x6a\x99\xd5\x56\x65\x95\x97\x67\x71\xd2\xad\x05\xa8\xc3\x61\xc9\x29\x9b\x86\x60\x39\x04\x93\xdf\x7a\xed\xcb\x69\x33\xda\xcf\xb4\x18\xcd\x04\x76\x05\xf4\x0a\x47\xab\x34\xf5\x3d\xde\x53\x9d\x3b\x25\xf9\x98\x0b\x92\x40\x59\xa3\xba\xd5\x01\x97\xb6\x38\x01\x30\x27\xc3\xf5\xc3\xf8\xd2\xb1\x70\xe3\x08\xd9\x7a\x6d\x49\x65\xb9\x7b\xde\xb5\x44\x1f\xd7\x6d\xec\x58\x93\x65\x91\xd0\xdc\xa5\x56\x27\xb9\x8e\xa6\x94\xe6\xda\x66\x83\xea\x5d\x82\x03\xee\x10\xd4\xcc\xee\x67\x6e\x75\x87\xd5\xea\x3e\xd4\xa3\x77\x49\x81\xa5\x6b\xd6\xee\x77\x9a\xb4\xdf\xc6\x6c\x11\xda\xe8\xd8\x38\x67\xaf\x33\xf0\xea\xc9\x78\x44\xb8\xd8\xb5\xc0\x8a\xe0\x55\x06\x1e\xd1\x2c\x11\x4d\x9f\x89\x70\x12\x8a\x95\x5a\x47\x4d\xbd\xc5\xfd\x8a\xaa\xbb\xed\x5d\xa6\x65\xbe\xce\xd5\x3a\x1f\x6a\xa3\xc6\x24\xf1\xf1\xb7\xbf\x4d\xb5\xb6\x86\x15\x5a\x0a\x8e\xd4\xd5\xfe\x0e\x43\x2b\x92\x0e\x8d\x00\xc5\x09\xb7\xb2\xee\x97\x87\x92\x0c\x73\x8f\xa3\xe5\x09\x08\x09\x13\xca\xb0\x8b\x56\x30\x09\xb1\xbe\x65\x52\x0c\xdc\x19\xb6\x4c\x9f\xba\xc2\xb1\x37\xbe\xe4\xb3\xf6\x24\x31\xa6\x5b\xda\x81\x71\x26\xbf\x1a\xd4\x32\xf3\x5d\xd7\x4f\xfa\x04\x98\x36\x03\x1f\x19\x64\x0e\xf2\xf7\x43\x9d\xbd\x2d\x3e\x59\xdf\x2b\x2d\xe8\xba\xce\xf1\xab\x31\xf1\x1b\x5e\x78\x58\xf0\xda\x09\x45\x23\x23\xc3\xef\x45\x1c\x73\x63\x98\xa6\x24\x09\x1b\xa1\x67\x70\x02\xc0\x77\x92\xc6\x30\xfd\xb5\x1a\x88\x5a\xec\x6e\x89\x47\x43\xb0\xb7\x97\xb4\xef\xb7\xc1\xc9\x5e\x23\x95\x8b\xbd\x9c\x99\xe5\x9a\x24\x37\xb7\x08\xb5\x3a\x14\x1c\x72\x9d\x69\x45\x99\x70\x0f\x66\xb7\x41\xae\xc4\xaa\x9d\xc9\x72\x57\xce\x30\xa7\x76\xe5\x4d\xcf\x95\x9c\xc6\x45\xc0\x6a\x4a\x97\xcb\x3b\x3c\x24\x34\xd8\x69\xd1\x6d\x0d\xf4\xf7\xc5\x92\x20\xa2\xf7\x6e\x44\x43\x59\xb2\x78\xe6\xbd\x5f\x44\x43\x53\x61\x16\xef\xb9\x24\x2f\x8a\x68\xe6\xdf\x43\x81\x56\x6e\xce\x32\xf6\xbc\xc8\x3e\x3a\x00\x20\x7f\x9f\x01\x59\x52\x09\x24\xf6\xf5\x83\x55\xc7\xcd\xb3\x8a\x46\xe2\x69\xcf\x3a\x82\xc1\x20\x20\xc8\x5e\x61\x7c\x03\x9c\x9b\xeb\x7f\x5e\xbf\xfb\xdc\x32\xa0\x36\x23\xcb\x83\x93\xb6\xba\x29\xc3\x01\xf9\x56\xba\x32\x56\x9a\xf9\xed\x28\xa2\xa1\xdd\xc1\xdb\xf5\xe4\x30\x1f\xcb\x8e\xb7\x6f\x23\xc9\x24\x05\xf2\x91\x7e\x73\xf2\x6c\x6f\x07\xed\xdb\xbd\xfd\xaf\xfc\xf6\xbf\x21\x5c\xa7\xa8\x30\x7c\xdf\x6b\xc2\xce\x47\x8b\x87\xbd\x22\x2c\xc1\xd0\x1f\xd3\xe2\x51\x61\xc7\x6b\x9b\xc2\xdf\xec\x66\xee\xf3\xbe\x37\x94\xaa\xcc\xf3\xb2\x8f\x34\x54\xcf\xe2\xca\x0f\xbc\xaa\xe4\x5b\xc1\x30\x8c\x1b\xf4\x4f\x99\xf8\x48\xc3\xeb\x35\x4e\xaa\x4f\xe2\x14\xd1\xbe\x89\xb3\xd2\x77\x72\x68\x05\xdc\xce\xd9\xd7\xfd\xbe\xd1\xf6\x98\x6c\xd7\x0c\xde\xc5\xe6\xae\xa8\x93\xff\x4b\xe2\x83\x13\x95\x0c\xef\xf0\xc6\x65\x54\x40\xb3\x27\x5f\xbf\xac\x6a\xba\xc8\x60\xd1\xfe\xd2\x5a\xd3\xc7\xf6\x6f\xfb\x12\xeb\x7f\x01\x00\x00\xff\xff\x0e\x60\x27\x78\xf7\x3e\x00\x00")

func templatesBaseTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesBaseTf,
		"templates/base.tf",
	)
}

func templatesBaseTf() (*asset, error) {
	bytes, err := templatesBaseTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/base.tf", size: 16119, mode: os.FileMode(480), modTime: time.Unix(1513711357, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCf_dnsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\xc1\x6a\xe3\x30\x10\x86\xef\x7e\x8a\x41\xec\x69\x21\x26\x10\xf6\x98\x43\x58\xf6\xb8\x79\x81\x65\x11\xb2\x34\xb5\x55\x64\x49\x68\x24\xa7\x69\xf0\xbb\x17\x59\x2e\x4d\x4a\x5b\x1c\x9a\xdc\x6c\x31\xf3\xff\xff\x37\x83\x34\x88\xa0\x45\x63\x10\x18\x1d\x29\x62\xcf\x95\xeb\x85\xb6\x0c\x4e\x15\x40\x3c\x7a\x84\x2d\x30\x8a\x41\xdb\x96\x55\x63\x55\x05\x24\x97\x82\x44\x60\xe2\x40\x3c\xb8\x14\xf1\xd7\x86\x3f\x3b\x8b\x0c\x18\xda\x81\x2b\x4b\xf3\x6f\x56\xb0\xa2\x9f\x14\x7e\x9c\x06\x11\xea\x0b\x8b\x91\x55\xd9\x42\xb4\x34\x55\x02\xec\x2f\x6a\xb3\x96\x56\xe3\xaa\x73\x14\x51\xad\x26\xc9\x0a\x60\xcc\x21\x5c\x8a\x3e\xc5\x4b\x3f\x9e\xad\x38\x61\x18\x30\x50\x31\x1f\x84\x49\xb3\xe2\xfb\xb0\xf5\x79\x6b\x7d\xde\x3a\x7e\x81\x19\x50\xba\xa0\x18\xb0\x83\x36\x4a\x8a\xa0\xb2\x44\xf1\x9a\x22\x68\xb5\xc4\x4d\xab\x91\xbd\x8e\x06\x20\x77\xfc\xac\x3f\x9e\xcf\xbc\x81\x52\xf4\x7b\xbf\xfb\xfb\x67\x3a\x8b\x06\xca\xd9\x66\xbd\xce\x33\x2c\xb1\x08\xb6\xf0\x6f\x36\x47\xd3\xd4\xf2\xa1\x64\x08\xdc\x34\x75\x36\xcf\x86\x23\xfb\xbf\x00\x8f\xa8\xbb\x01\x15\x51\x77\x27\x2e\xa2\xee\x7a\xa8\xc6\xdd\x84\x2a\xcb\x2c\xc1\xda\x2d\x45\xd2\xbe\x7e\x4c\xbd\x6f\xdc\xd3\xf4\xed\x53\x63\xb4\xe4\xda\x2f\xa3\x8a\xd2\xdf\x00\x2a\x4a\x7f\xa7\x55\x45\xe9\xaf\x5f\x95\x26\x57\xa0\xa4\x4b\x36\xbe\xbd\x09\x9a\x9c\x11\x51\x3b\xcb\x09\xdb\x1e\x6d\xa4\xf2\x88\x7c\xf3\xf2\x69\x72\x2b\xc2\xf6\x1e\x13\xd0\xe4\x3e\xbd\x85\x2f\x01\x00\x00\xff\xff\x9c\x64\x07\x0b\x7b\x05\x00\x00")

func templatesCf_dnsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesCf_dnsTf,
		"templates/cf_dns.tf",
	)
}

func templatesCf_dnsTf() (*asset, error) {
	bytes, err := templatesCf_dnsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cf_dns.tf", size: 1403, mode: os.FileMode(480), modTime: time.Unix(1511973221, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCf_lbTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\xdc\xcb\x6e\xdb\x46\x14\x06\xe0\xbd\x9e\x82\x10\xba\x2a\x60\x55\x23\xde\x0b\x78\x65\xa0\x68\x37\x45\xd0\x64\x57\x14\x04\x45\x8f\x2d\x22\x34\x29\xcc\x0c\x5d\xa4\x81\xdf\xbd\xe0\x4d\x97\x88\xe2\xe5\xf7\x9f\xc4\x71\x56\x21\x79\x66\xce\x90\x87\x1f\x8f\x04\xd3\x4a\xea\xa2\x54\x89\xb4\x96\xf1\xbf\x3a\xd2\x32\x29\x55\x6a\x3e\x45\x8f\xaa\x28\xf7\x4b\x6b\x99\x3c\x44\x5a\xef\xa2\x6c\x7b\xb1\xeb\xf3\xc2\xb2\xee\xa5\x4e\x54\xba\x37\x69\x91\x5b\xb7\xd6\xf2\xee\x37\xeb\xfd\xfb\xdf\x97\x0b\xcb\x7a\xde\x27\x51\x7a\x6f\xd5\x3f\xb7\xd6\xf2\xa7\xcf\x59\x91\xc4\xd9\xaa\xd9\xfc\xb2\x5c\x2c\x2c\x2b\xcd\x1f\x95\xd4\xba\x1e\xc7\xb2\x92\xf4\x5e\x45\xdb\xac\x48\x3e\x6a\xeb\xd6\xfa\x7b\xb9\x5e\xd5\xff\x7e\x59\x2f\xff\xa9\xf7\xef\x55\x61\x8a\xa4\xc8\xda\x01\x4d\xb2\x5f\xd6\xdb\x1f\x54\xf1\x14\xed\x0b\x65\xea\xed\x9b\xcd\x66\x53\x6f\x36\x45\xb7\xf1\x64\xf3\x4b\x35\xad\x3c\x9d\xf5\x3c\x7a\xdd\x13\xba\xee\x9b\xfd\x46\x2c\x27\x24\x5d\x4f\x67\xe2\xc7\x6e\xb2\x3f\xe3\x27\xd9\x9c\x8c\xe7\x58\xad\x64\xfe\x5c\x9d\x8a\x9b\xe4\xe1\x46\xeb\xdd\x4d\xb6\xbd\xe9\x4e\xf0\x4d\x73\x82\xeb\x11\x5e\x16\x8b\xa2\x34\xfb\xd2\x8c\x5d\x89\xe7\x38\x2b\xdb\xd1\x2f\xaf\xe3\xea\x5a\xec\xaa\xbe\x18\x2f\x8b\xc5\xe4\x2a\x48\x73\x23\x55\x1e\x67\xd3\xcb\xc1\xfa\xa3\x0d\x81\xea\xe2\x7c\x9a\xe6\x34\xcf\x5f\xe2\x65\x0d\x0d\xd5\x91\x75\xbd\x96\x7e\xa4\x7a\xea\x2e\xd5\xf4\xc2\x1a\xbc\xb8\x53\x2b\xec\xca\x20\x57\x4a\x4d\x66\xdb\xd3\xfa\x6a\xa6\xca\xab\x95\xf5\xfe\x1c\x96\xab\x77\x85\x32\xd1\xc5\xa2\xab\xc5\x25\xaa\xd0\x3a\xfa\xaf\xc8\x65\x94\x15\xf1\x7d\xb4\x8d\xb3\x38\x4f\xd2\xfc\xd1\xba\xb5\x8c\x2a\x65\x75\x1a\x77\x32\xce\xcc\x2e\x4a\x76\x32\xf9\xd8\x9e\xce\x66\xd3\xa7\xc8\xec\x94\xd4\xbb\x22\xbb\xaf\xa7\x73\xeb\x7d\x65\x7e\xb9\xf7\xd6\x6a\xca\xa3\x5e\xef\x73\x9c\x9d\xa7\xe9\x35\xd7\x3e\x56\x8f\xd2\x5c\x2c\xe1\xc3\xdd\xbb\x5f\xab\x1a\x6a\xae\xba\x49\x9f\x64\x51\x9a\x2f\x0e\x3a\x14\x58\x96\x6a\x23\x73\xa9\xda\x34\xd3\x5c\x9b\x38\x4f\x64\x8f\x6f\xa7\x3b\xbb\x02\x3b\xad\xf1\x6c\x7b\x5e\xc8\x67\xa1\xd5\xce\xf3\xfb\xe3\x18\x5a\xe7\xc1\xbb\x13\x75\xb9\xcd\xa5\xd1\x27\x59\x1c\x46\xaa\xf7\xac\xaa\xd0\xe6\x98\xd5\xcf\x6d\x54\x6f\xbd\x56\x75\xd2\x5b\x9c\x32\xdb\x1e\xd3\x58\x55\x87\x35\xb5\x77\x39\x44\xa9\xb2\x09\x23\xdc\xe7\x3a\x3a\x8e\x32\x8e\xa5\x2a\x4a\x23\xd5\xf4\xa7\xe6\x5f\xf5\xf1\xdf\xf1\xc1\x19\xf4\x59\x55\x6f\x7c\xf9\x5a\x53\x3a\x8e\xdd\x33\x67\xb3\xf5\x2b\x4e\x7a\x65\xd6\xe3\xb4\x6f\x10\xf4\xa6\x9c\xa6\xf5\x08\xc3\xa5\x37\x8a\xf8\xb5\xf0\x19\x9d\xc2\x71\x88\x99\xcd\x42\x73\x17\x7c\xbb\x7e\x61\x70\xad\x48\xcb\xd0\x73\x17\x7d\x79\x27\xbd\xe9\xea\x9a\xd1\x31\x4c\xbc\xc8\x33\xea\x0d\xec\x1b\x0e\x03\xe0\xad\xc3\xe1\x04\xbc\x99\xee\x41\x6c\xc6\xda\x87\x60\xcd\x6a\x1e\xda\xa2\xed\x6d\x1d\x76\xc6\x0c\xf4\x0e\x6d\x64\x6f\xe7\xd0\x45\x4e\xcb\x62\x28\x8d\xb1\x3c\x4e\x1e\x25\x97\x99\x74\xc1\xba\x89\xd6\x3a\x8b\x12\xa9\x4c\xfa\x90\x26\xb1\x91\x15\x2d\x87\xda\x4c\xe3\xa7\x48\x4b\xf5\x2c\xd5\xe9\x21\x55\x2f\x52\xfd\x77\x15\xab\xfc\x85\xb7\xa0\x81\x9e\xec\xf4\x29\xd5\xbf\x20\xad\x33\xee\x72\xa8\x68\xbe\xbe\xbb\x3b\x4e\x31\xd6\xe0\x1d\x8e\xec\xef\xf1\x8e\x03\x8d\xb4\x79\xc7\x71\xe6\x76\x7a\x26\xd9\x4f\x6f\xf3\x3e\xdc\xbd\xfb\x8e\x3d\x9e\x58\x6f\x9c\x9e\x47\x8c\x10\x9b\xb7\xdc\xfb\x98\x64\x3f\xad\xf1\x19\xb8\x12\xa3\x4f\xa1\xde\xd8\x19\x2d\x4f\x1b\x3f\xb3\xdf\xf9\x70\xf7\xee\xdb\x35\x3b\xd7\x97\x88\x74\x3a\xbd\xb5\x74\x59\x4f\x6f\x25\xdd\x1f\xb3\x31\x6b\x4b\x7f\x46\x57\x36\xa5\x0e\xa7\xde\x0c\x60\x3f\xd6\x44\xe3\xcd\x58\xb3\x68\x7a\x27\xe6\x0d\x74\x62\xf6\x40\x27\xe6\xbe\xae\x11\xb3\x67\x34\x62\x87\x7b\x6a\xfe\xb7\x38\x87\xd0\xd1\x6f\x71\xa6\xe5\xe1\xe2\x79\xb8\xcc\x3c\x3c\x3c\x0f\x8f\x99\x87\x8f\xe7\xe1\x33\xf3\x08\xf0\x3c\x02\x66\x1e\x21\x9e\x47\x48\xcc\xc3\x1e\xf8\xe8\x32\x92\x87\x3d\xf0\xd9\x65\x7e\x1e\x02\xcf\x43\x30\xf3\x40\xbf\x05\x3e\x84\x92\xf2\xb0\xf1\x3c\xae\x7d\xf0\x81\xf2\xc0\x3d\xb5\x99\x9e\xda\xb8\xa7\x36\xd3\x53\x1b\xf7\xd4\x66\x7a\x6a\xe3\x9e\xda\x4c\x4f\x6d\xdc\x53\x9b\xe9\xa9\x8d\x7b\x6a\x33\x3d\x75\x70\x4f\x1d\xa6\xa7\x0e\xee\xa9\xc3\xf4\xd4\xc1\x3d\x75\x98\x9e\x3a\xb8\xa7\x57\xbf\x48\x82\xf2\xc0\x3d\x75\x98\x9e\x3a\xb8\xa7\x0e\xd3\x53\x07\xf7\xd4\x61\x7a\xea\xe0\x9e\x3a\x4c\x4f\x1d\xdc\x53\x87\xe9\xa9\x83\x7b\xea\x30\x3d\x75\x71\x4f\x5d\xa6\xa7\x2e\xee\xa9\xcb\xf4\xd4\xc5\x3d\x75\x99\x9e\xba\xb8\xa7\x2e\xd3\x53\x17\xf7\xd4\x65\x7a\xea\xe2\x9e\xba\x4c\x4f\x5d\xdc\x53\x97\xe9\xa9\x8b\x7b\xea\x32\x3d\x75\x71\x4f\x5d\xa6\xa7\x2e\xee\xa9\xcb\xf4\xd4\xc3\x3d\xf5\x98\x9e\x7a\xb8\xa7\x1e\xd3\x53\x0f\xf7\xd4\x63\x7a\xea\xe1\x9e\x7a\x4c\x4f\x3d\xdc\x53\x8f\xe9\xa9\x87\x7b\xea\x31\x3d\xf5\x70\x4f\x3d\xa6\xa7\x1e\xee\xa9\xc7\xf4\xd4\xc3\x3d\xf5\x98\x9e\x7a\xb8\xa7\x1e\xd3\x53\x1f\xf7\xd4\x67\x7a\xea\xe3\x9e\xfa\x4c\x4f\x7d\xdc\x53\x9f\xe9\xa9\x8f\x7b\xea\x33\x3d\xf5\x71\x4f\x7d\xa6\xa7\x3e\xee\xa9\xcf\xf4\xd4\xc7\x3d\xf5\x99\x9e\xfa\xb8\xa7\x3e\xd3\x53\x1f\xf7\xd4\x67\x7a\xea\xe3\x9e\xfa\x4c\x4f\x87\x7e\x95\x6e\x24\x8f\xa1\xdf\xa5\x9b\x9f\x07\xee\x69\xc0\xf4\x34\xc0\x3d\x0d\x98\x9e\x06\xb8\xa7\x01\xd3\xd3\x00\xf7\x34\x60\x7a\x1a\xe0\x9e\x06\x4c\x4f\x03\xdc\xd3\x80\xe9\x69\x80\x7b\x1a\x30\x3d\x0d\x70\x4f\x03\xa6\xa7\x01\xee\x69\xc0\xf4\x34\xc4\x3d\x0d\x99\x9e\x86\xb8\xa7\x21\xd3\xd3\x10\xf7\x34\x64\x7a\x1a\xe2\x9e\x86\x4c\x4f\x43\xdc\xd3\x90\xe9\x69\x88\x7b\x1a\x32\x3d\x0d\x71\x4f\x43\xa6\xa7\x21\xee\x69\xc8\xf4\x34\xc4\x3d\x0d\x99\x9e\x86\xb8\xa7\x21\xd1\x53\xb1\x86\x3d\xed\x42\x49\x79\xc0\x9e\x76\xa1\xa4\x3c\x60\x4f\xbb\x50\x52\x1e\xb0\xa7\x5d\x28\x29\x0f\xd8\xd3\x2e\x94\x94\x07\xec\x69\x17\x4a\xca\x03\xf6\xb4\x0b\x25\xe5\x01\x7b\xda\x85\x92\xf2\x80\x3d\xed\x42\x49\x79\xc0\x9e\x76\xa1\x9c\x3c\x04\xee\xa9\x60\x7a\x2a\x70\x4f\x05\xd3\x53\x81\x7b\x2a\x98\x9e\x0a\xdc\x53\xc1\xf4\x54\xe0\x9e\x0a\xa6\xa7\x02\xf7\x54\x30\x3d\x15\xb8\xa7\x82\xe9\xa9\xc0\x3d\x15\x4c\x4f\x05\xee\xa9\x60\x7a\x2a\x70\x4f\x05\xd3\xd3\x0d\xee\xe9\x86\xe9\xe9\x06\xf7\x74\xc3\xf4\x14\xfe\xab\x2e\x87\x50\x52\x1e\xb8\xa7\x9b\x89\x9e\xf2\xde\x0d\x7c\xfd\xfb\xc7\xed\xf8\x63\x2f\x1f\x37\x87\xf5\xbf\x79\xdc\x0e\x31\xf2\xda\x71\x3b\xc2\xd9\x3b\xc7\xff\x07\x00\x00\xff\xff\x87\x02\xea\x27\x90\x4d\x00\x00")

func templatesCf_lbTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesCf_lbTf,
		"templates/cf_lb.tf",
	)
}

func templatesCf_lbTf() (*asset, error) {
	bytes, err := templatesCf_lbTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cf_lb.tf", size: 19856, mode: os.FileMode(480), modTime: time.Unix(1513711364, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesConcourse_lbTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x3f\x6f\xdb\x3e\x10\xdd\xf5\x29\x08\xe1\x37\xfd\x50\xa9\x8a\xad\xc1\x8b\xa7\x4c\x5d\x8a\x0e\xdd\x82\x80\xa0\x28\xc6\x12\xc2\x90\xc2\x91\x74\x60\x04\xfe\xee\x05\x49\x89\xb6\xfe\x25\x72\x1d\x18\x8d\xb2\x04\x77\xbc\xe3\xbd\xf7\x8e\x77\x06\xa6\xa4\x01\xca\x50\x4c\x5e\x15\x56\x8c\x1a\xa8\xf5\x01\xef\x40\x9a\x26\x46\x31\x95\x82\x4a\x03\x8a\x61\x5e\xe0\x5a\x68\x06\x82\xf0\xd1\xb1\xb7\x08\xa1\x92\x29\x0a\x75\xa3\x6b\x29\xd0\x16\xc5\xf7\x5d\x20\xfa\xd1\x46\xc5\x11\x42\xfb\x86\xe2\xba\x44\xee\xdb\xa2\xf8\xbf\x37\x2e\x29\xe1\xa9\x37\x1f\xe3\x28\x42\x48\x93\x9d\x72\x09\x11\xfa\x49\x5e\x98\x3f\xb6\x27\x90\x32\xb1\xb7\x87\x92\x50\x52\xc2\x8b\xa4\x2b\x29\xe9\x4a\x4a\x7c\x49\x11\x42\xc7\xe8\x18\x45\xef\xc1\xc3\x60\x38\x9b\xc5\xb8\xc9\x3c\x2e\x7d\x68\x18\x42\xa1\xe4\x5a\xec\x80\x29\x65\x2f\x68\x40\x6a\x49\x25\x6f\x3d\x9a\xba\x6b\x9f\x40\xbe\xe0\x46\x82\x76\xd6\x4d\x66\x53\xc8\xce\x10\x4c\xb4\x2e\x01\x17\x5c\xd2\x67\x85\xb6\xe8\x21\xce\x52\xf7\xf7\x3d\x8b\x1f\x2d\x09\x83\x42\xeb\xd2\xd3\x30\xc6\x90\x2e\x11\x28\x75\xdc\x5e\xc5\xc6\x6a\xb5\x5a\x7d\x06\x1f\x36\xcf\x88\x91\xd6\xf8\xd5\x38\xc9\xf3\xf5\x67\x50\x92\xe7\xeb\x11\x23\xde\xf6\xd5\x08\x61\x1e\xf7\x14\x27\x6c\x8e\x92\xe4\x6e\xcc\xc8\xf8\xcd\xfc\x2b\x4f\x86\x17\x03\xf0\x1e\xac\xb0\x83\xaa\xff\x85\xb1\xa5\x2a\x09\x1a\x4f\x0d\x2f\x0b\x9c\x4b\x52\xe2\x82\x70\x22\x28\x03\xec\x48\xdb\xa2\x58\x30\xfd\x2a\xe1\xd9\x1e\x50\xa6\x10\x4c\xab\x7e\xea\x87\x0e\x98\x73\xa6\xbc\x68\xff\x53\xe9\xff\xae\xf0\xc7\xa9\xca\x31\xaf\x95\x66\x82\xc1\x50\xbf\x6e\xd2\xf5\x6b\x21\x20\x4e\x0c\xf2\xa2\xc7\x5a\x4a\x40\x1c\x87\x62\x06\xdc\xbf\xef\x7f\x39\x5f\x27\xdf\x99\x6f\x93\x45\x6e\x55\x3c\x11\xc3\x35\x26\xd4\x6d\x0b\x3f\xec\xcf\x1b\xa6\xcb\xf4\x24\xe1\x95\x40\x19\xfb\x03\x04\x76\x4c\xb7\xf2\x0e\xaa\xc3\xe7\xce\x74\x80\x2e\x54\x3b\xb1\x11\x06\xa1\x73\xd4\x04\x81\x3f\x92\x75\x93\xf5\xa0\xb7\xd3\x3e\xd0\x74\x62\x27\x6c\xc2\x99\x35\x58\x31\xc2\x75\x85\x69\xc5\xe8\x73\xcb\x90\x37\x1d\xb0\xae\x80\xa9\x4a\x72\x1f\x7d\x97\x39\xa7\x11\x63\x77\x70\xba\x26\xdf\x13\xde\xa7\x77\xed\x9d\x63\x0d\xcf\x55\x9c\xe6\x6c\xae\x95\x4e\x6b\xe2\x06\xcd\xe4\xd6\xc6\xad\xdb\xc9\x5e\x7a\x45\x43\x9d\x08\x5a\xdc\x52\x2e\xa4\xdf\x54\xed\xc2\xbc\xb4\xad\x2e\x51\x32\x2c\xb7\x1b\x08\x69\xb7\xdd\xad\x75\xcc\xf3\xf5\x15\x32\x06\x76\x16\xab\x68\x23\xfa\x22\xfa\x1d\xff\x17\x1a\x4a\xa3\x1b\xa3\x2f\xf9\x6d\xbe\x27\xdc\xb0\xeb\xf6\xa1\x05\xfa\xce\xf5\xe7\x64\xa9\xfe\xa5\x0f\x0b\xa7\xb4\xbf\xe1\xdb\x62\xf5\x2e\x39\xef\x5e\xad\x0f\x78\x9c\xc5\x60\xfd\x93\x7c\x0d\xfb\xfc\x03\x2e\x0c\xf0\x45\x69\x4a\xa1\x70\x48\xf5\x27\x00\x00\xff\xff\x78\x31\x6c\x5a\x88\x0d\x00\x00")

func templatesConcourse_lbTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesConcourse_lbTf,
		"templates/concourse_lb.tf",
	)
}

func templatesConcourse_lbTf() (*asset, error) {
	bytes, err := templatesConcourse_lbTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/concourse_lb.tf", size: 3464, mode: os.FileMode(480), modTime: time.Unix(1513711367, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIso_segmentsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\xcd\x8e\xdb\x36\x10\xbe\xfb\x29\x06\x42\x0e\x71\xa2\x15\xe4\xbf\x54\x1b\xc0\x2d\xd0\xf6\x58\xa4\x01\x52\xf4\x12\x04\x04\x45\xd1\x36\x11\x9a\x14\x48\xca\xed\x6e\xe0\x77\x2f\x48\xca\xb2\xfe\x2c\xdb\xbb\x6e\xba\x40\x7d\x30\x6c\x92\x33\xf3\x0d\xbf\xe1\xcc\x90\x3b\xac\x18\x4e\x39\x85\x80\x69\xc9\xb1\x61\x52\x20\x4d\xd7\x5b\x2a\x8c\x0e\xe0\xdb\x08\xc0\x3c\xe4\x14\xca\xcf\x12\x02\x6d\x14\x13\xeb\x60\x04\x90\xd1\x15\x2e\xb8\x39\x4c\xc4\x7e\x4c\x13\xc5\x72\xab\xc6\x8e\xfd\xee\x7e\x61\xce\x1f\x80\x28\x8a\x0d\x05\x0c\xbf\xfd\x0c\x58\x64\xf0\xeb\x87\x4f\x40\x85\x51\x8c\x6a\x58\x49\x05\x18\x34\x13\x6b\x4e\xa1\xc2\x01\x25\x8e\x08\xfe\xc4\x9c\x65\xb0\xc3\xbc\xa0\x1a\xb0\xa2\x10\x83\x54\x30\x89\x82\xd1\x7e\x34\x6a\x78\x80\x8c\x44\xa9\xd4\x1b\x94\x4b\xd5\x76\x60\x09\x01\x67\xda\xd4\xa1\x2f\xe1\xf3\x74\x1a\xc2\xbb\xe4\x5d\x12\xc2\x74\xb1\x58\x84\x30\x9f\xda\x91\xe9\x62\xba\x88\xbf\xf4\xaa\xd7\x1b\xac\x68\x86\x0c\xc9\x2f\x37\x72\x1f\xdf\xc7\x21\xdc\xc7\xf7\x93\x10\x92\x38\x99\x86\x90\xcc\xe2\xd8\x7d\xdb\x91\x24\xb9\x0f\x21\x99\xcf\x67\x21\xcc\x62\x3b\x3e\x77\xbf\x93\x38\x89\x43\x98\xcd\x17\x3f\x58\xd9\xe9\xcc\x7d\x4f\x3d\xc4\x41\x6c\x45\x76\x05\xb6\x12\xc3\x2c\xb6\xa8\xde\xc5\xde\x6b\x2e\x09\xe6\xda\x49\x5b\xd5\xf8\x11\x11\x59\x08\xbb\x3e\x78\xf5\x6d\x87\x55\xd4\x8d\x16\xf8\x11\x62\xf8\x09\x38\x15\x6b\xb3\x79\x6d\xd7\xe0\x1d\x66\x1c\xa7\x8c\x33\xf3\x80\x1e\xa5\xa0\x7a\x0c\xef\x21\xde\x3b\xda\x14\xd5\xb2\x50\x84\x42\x80\xff\xd2\x48\x17\xa9\xa0\x26\xf0\x8e\xf8\x3f\x25\x78\x6f\xb7\xfe\x71\x18\x1c\xc0\xa8\x8e\x6d\x6f\xfd\xda\xe5\x04\xb1\xec\xc4\x6a\x3f\xe9\xd6\x11\x96\x29\x94\x72\x49\xbe\x36\xd6\xd9\x61\x6f\xdd\x39\x60\x05\xec\x50\x08\xf3\xd0\x03\x89\x98\xc8\xe8\xdf\xf0\xf6\x9c\x9b\x6f\x61\x32\x76\x86\x3a\x93\xde\x10\xe5\xd4\x6e\xda\x09\xf9\x86\x31\xab\xc7\x92\x88\xd7\x9e\x0f\x80\x0f\x78\x4b\x8f\x4c\x50\xb1\xb3\x5e\xdd\x31\x2d\xef\x3c\xf6\x57\xdf\x6a\xe2\x0e\xc5\xbe\xbb\xe3\x4a\x16\x86\x22\x63\xc3\x07\x61\xad\x25\x61\x8e\xce\x00\x02\x3f\x73\x8e\x88\x21\x16\xbc\x5c\x45\x44\xc3\xe3\x23\xdb\x51\xcd\x44\xf4\x26\x62\x59\xc7\x6d\x80\x3a\x4a\x96\x79\x4d\x2d\xf4\x11\x13\x86\x2a\x81\x79\x73\x30\xeb\x0b\x33\xca\xd3\x32\xc6\xdc\x5a\x85\xec\xff\xa3\x73\x03\xd1\xed\x49\x10\x76\xe7\x7b\x3f\x95\xa8\xde\x48\x65\x50\x9d\x14\x6f\xea\x8e\xa7\x2e\xf0\x94\xd4\xda\xb1\x8c\xb8\xc4\x19\x4a\x31\xc7\x82\x30\xb1\x86\x25\x18\x55\x50\x6b\x65\x43\x31\x37\x1b\x44\x36\x94\x7c\x2d\x29\xf7\x43\x0f\xc8\x6c\x14\xd5\x1b\xc9\x33\x67\x72\xe1\xe6\x0a\xd1\x9d\x5d\xc2\xd4\xcd\xb9\xbd\xd9\x61\xde\x84\x3a\xf1\x93\x06\xab\x35\x35\x1d\x3f\xfe\xf8\xe5\xe3\xfb\xc4\x65\x73\x00\xc3\xb6\x54\x16\xed\xf3\x37\x75\x21\x35\x02\xb0\xe9\x84\x0a\xaa\x4a\x94\x4c\x68\x83\x05\xa1\x2e\xf9\x94\x6b\x93\xb8\x35\xa5\xa4\x91\x44\x72\x6b\x69\x63\x4c\xee\xed\xf0\xf4\x28\x03\x4d\x49\x3b\x75\x90\xa9\x30\x1e\x24\x2f\x43\x31\x04\xe3\x1c\x0e\x58\xc2\x7c\x3e\x3b\x81\xe4\x20\xac\xbd\xb4\xd6\x1c\x11\xaa\x0c\x5b\x31\x82\x4d\x33\x62\x19\xde\x22\x4d\xd5\x8e\xaa\xfa\x92\x88\xa7\xee\x6f\x84\x95\xd8\xdf\xce\x21\x43\x86\xfd\x19\x74\x48\x6b\x7e\x5b\x77\x34\x25\x85\xb2\xc9\x6d\xad\x64\x91\x6b\x5b\x74\x4a\x2d\xcd\x99\x88\xac\x8e\xe7\xb2\x3d\x67\x0f\xf4\x97\x2a\xb7\xe8\x9a\x3b\x95\x32\x9f\x55\xac\x68\x2d\xa9\x58\xa9\x6e\xb9\x69\xe8\x3e\x94\x9d\xd6\x60\x2d\xe9\x0d\x27\x86\xaa\xec\xf4\xd5\x9a\x6e\x53\xf4\x51\xb1\x9d\x6d\x85\x3a\x8d\xce\x15\x79\xbe\x84\x7a\xe7\xa1\xf6\x67\xf8\x7e\x27\x7d\x87\xf0\xbd\x7c\xfd\xe4\xcc\x75\x5d\xd5\x57\xf8\xea\x54\x3c\xc5\x65\xa4\x0a\x4e\x83\xbe\xce\xb6\x6a\x13\xfd\x8a\x8b\x2a\x00\xbc\xa9\x17\xfd\x4e\xaf\x59\x96\xe9\x16\x82\x63\x2f\x52\x9d\x9c\x56\x5c\x3b\x0d\x3d\xb1\xde\xea\xbc\xdb\x49\x9a\x89\xb5\xa2\xda\xe5\x9d\xf6\x11\xae\x2f\x2b\x13\x81\x91\x9d\x34\x50\x43\x55\x6f\x46\x3a\x7e\xf5\x14\xe5\x95\x92\xdb\x5e\x7d\x4f\xd2\xe6\xf9\x6b\x53\x57\xcf\x35\xed\xdd\xe9\x9c\xd5\x13\xd5\xfe\x9a\x68\xa8\x75\xf5\xcf\x8d\x89\xf6\x05\xe1\xa9\x91\x71\xf2\xb8\xbe\x80\xf8\x68\xfb\x78\x8b\x28\xb9\x40\xe7\x8b\x8a\x15\x7b\xcb\xba\x51\xac\x54\x17\xb6\x97\x1c\x2b\x45\xf6\xac\x58\xa9\x7c\xbc\x61\xac\x0c\xe9\x7c\x19\xb1\xe2\x52\x1f\xe6\x1c\x19\x85\x57\x2b\x46\xae\x89\x98\x43\x45\xcd\xa9\xc8\x34\x92\xa2\xb3\x37\x9f\x7b\xe0\xf4\x15\x14\xdf\x38\xbd\xac\xca\x74\x37\x39\x43\x7c\x3c\x1c\x6b\xf1\x7f\x40\x71\x19\x75\x19\xa3\x6b\x89\xd2\xd4\x11\xec\x69\xa3\x19\x22\x94\x73\xfd\xef\xd3\xdb\xd3\xa9\x3e\x89\xdd\x53\x5b\x71\xcb\xb2\x32\xc0\xee\x24\x89\x27\xc3\x04\x97\x2b\x9e\xc6\xf1\xe9\x54\x78\x21\xd5\x02\x9b\x5b\xb0\x7b\x35\x2d\xd6\xee\xff\xe6\xcc\xc9\xc2\xe4\x85\x81\x80\xac\x50\xe3\x4d\x06\x09\xbc\x2d\xf7\xd9\x3d\xfa\x36\xcb\x00\x91\x82\x60\xff\x90\x44\x79\x1a\x35\x24\xa3\x37\x91\x95\x0d\xdd\x15\xfa\x75\x10\x8c\xc7\x21\xc4\xe3\xa6\xb5\x2e\x20\xc4\xb2\x4b\xac\x9d\x77\xcc\xbf\x62\x9d\xb1\x8d\x1f\x51\xf5\x40\x86\xb6\x38\xcf\x99\x58\x77\xcc\xbb\x4b\xd1\x23\xcb\xb7\x38\x7f\xdd\xbc\xdf\x36\x5f\xcd\x3a\x8f\x87\xfb\x20\x84\x21\x01\xbb\xf7\x63\x7b\x7b\x1a\xc0\xe5\x5e\x47\xbf\x3b\xb2\xe3\x9b\xec\x29\x84\xbd\xc7\xfa\x19\xe4\xf5\x66\x89\x53\x1c\xfe\x13\x00\x00\xff\xff\x60\x50\xeb\x32\x2a\x19\x00\x00")

func templatesIso_segmentsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesIso_segmentsTf,
		"templates/iso_segments.tf",
	)
}

func templatesIso_segmentsTf() (*asset, error) {
	bytes, err := templatesIso_segmentsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/iso_segments.tf", size: 6442, mode: os.FileMode(480), modTime: time.Unix(1513711351, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesLb_subnetTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\x4d\x6e\xfb\x20\x10\xc5\xf7\x3e\xc5\x08\x65\xf1\xff\x48\x68\xd4\x55\x37\xb9\x42\x2f\x50\x45\x08\xe3\xa9\x83\x4a\x20\x32\x63\xa7\xa9\xe5\xbb\x57\x80\x15\xdb\xb5\xd3\xa6\xc9\xc6\x02\xe6\xf7\xde\x63\x86\x0a\xbd\xab\x2b\x85\xc0\xe4\xd9\x0b\x5f\xe7\x16\x89\x01\x33\x79\xff\xed\x19\xb4\x19\x80\x72\xb5\x25\x18\xff\x76\xc0\x56\xad\x41\x5b\xd2\xe1\x4f\x23\x2b\x2e\x1b\xa9\x8d\xcc\xb5\xd1\x74\x11\x1f\xce\xa2\xff\xdb\xb1\x0c\xa0\x39\x29\xa1\x8b\x79\xa5\x53\xd2\xf0\xb4\x19\xcf\x29\x5d\x54\x22\x37\x4e\xbd\x4d\xce\x85\xe5\xe4\x24\xaa\x84\x82\xb0\xb4\x86\xa7\x75\x32\xc5\xb5\x2d\xf0\xfd\xff\x63\x52\x9b\xb9\x48\x14\x34\x78\x44\x4b\x37\x8c\x4e\x48\x81\x93\x01\x90\x2c\x7d\x4c\x0e\xf0\x2c\x8f\x3d\x26\x94\xa3\x6d\x82\xe5\x8d\xc9\x37\xc9\xd7\xaa\x1d\x55\x47\x13\x5d\x00\x18\xfd\x8a\xea\xa2\x0c\xf6\x14\x5d\x5a\x57\xa1\x50\x07\x69\x4b\xf4\xb0\x83\x17\x36\x44\x66\x6b\x60\x33\x5f\x6c\x1f\x59\x5d\x96\x4d\x9b\x54\xb9\x9a\x50\x90\xcc\x0d\xa6\x4e\x4d\x16\xda\xe1\xce\x97\x2e\x7a\x99\x76\x83\x53\xa0\x27\x6d\x25\x69\x67\xc5\xa8\x3f\x3b\x60\x5b\x1e\xff\x0f\xdb\x90\xb7\x94\x84\x67\x79\xf9\xd2\xe6\x24\x1f\x24\xb4\x25\xac\x2c\x92\xe8\x0f\x72\x5d\xf2\xbe\xeb\x23\xc9\x71\xf9\xb5\x74\xb4\xcf\xa7\x0e\xf9\x37\x71\x7a\xa0\xf4\xde\x29\x1d\xed\x33\x60\x69\xe7\x87\xc1\xbe\x77\xaa\x13\xe3\x6a\x79\x32\x64\xc3\x43\xe2\x83\x1a\xff\xc7\x75\x31\x1b\xb4\xd9\x05\xfc\x26\xb8\xab\xe9\x54\xd3\xe8\xad\x0a\x5d\xf4\xa9\x1a\x69\x6a\x8c\x33\x96\x68\xcb\x76\x3a\xb6\x5f\xe6\xcc\x53\xdf\x8f\x9d\xd5\xde\x54\x89\x4f\xfb\x7e\xf0\x30\x80\x89\xf8\x19\x00\x00\xff\xff\x0b\x56\xd0\x1c\xba\x04\x00\x00")

func templatesLb_subnetTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesLb_subnetTf,
		"templates/lb_subnet.tf",
	)
}

func templatesLb_subnetTf() (*asset, error) {
	bytes, err := templatesLb_subnetTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/lb_subnet.tf", size: 1210, mode: os.FileMode(480), modTime: time.Unix(1513711377, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSsl_certificateTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8f\x41\x6e\xc3\x20\x14\x44\xf7\x9c\x62\x84\xba\xee\x0d\x72\x16\x84\xf1\xb8\xf9\x2a\x31\xd1\x87\xd0\xa2\x88\xbb\x57\xc6\x1b\xa7\x92\x37\x61\x83\x04\xf3\x46\x6f\xaa\x57\xf1\x53\x24\x6c\xce\xd1\x05\x6a\x91\x45\x82\x2f\xb4\x78\x1a\xa0\xb4\x3b\x71\x81\xcd\x45\x65\xfd\xb2\xa6\x1b\x73\x4a\xb8\x70\xf5\xb2\xbe\xc1\xdd\x55\xea\x76\x7f\xb3\x9d\xd2\xca\x9c\x1e\x1a\x08\xeb\x7f\xb2\x13\x7f\x73\x99\x5a\xa9\xaf\xca\x36\x4e\xe3\x61\xaf\x59\xfd\x6d\x2b\xe7\x22\xbf\x5b\xdb\xc7\xb3\x7a\xfd\xcc\xd7\xa4\xc5\x71\xad\x4e\xe6\x6e\x8d\x01\x8e\x2a\x53\x9a\x1b\x0e\xe1\x57\xd3\x6e\xff\xc5\xc7\xe2\xd3\xf8\xfe\x3d\xa0\xc3\x44\xec\xe7\x14\x3a\x44\x77\xbf\x28\x0b\x43\x0b\x91\x63\x14\x10\x94\x43\x95\x4b\x52\xba\x99\xb9\x68\x6a\xb8\xa0\xe8\x83\x06\xe8\xa6\x9b\xbf\x00\x00\x00\xff\xff\x4f\x95\x65\x5c\xd6\x01\x00\x00")

func templatesSsl_certificateTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesSsl_certificateTf,
		"templates/ssl_certificate.tf",
	)
}

func templatesSsl_certificateTf() (*asset, error) {
	bytes, err := templatesSsl_certificateTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/ssl_certificate.tf", size: 470, mode: os.FileMode(480), modTime: time.Unix(1511827657, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVpcTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\xd1\x4a\x03\x31\x10\x7c\xcf\x57\x0c\xc1\x87\x56\xf4\xa8\xaf\x85\xea\x1f\xe8\x27\x84\x34\x59\xaf\xab\xe9\xe6\x48\x72\xa7\xa5\xdc\xbf\x4b\xee\x5a\x85\xa3\x0f\x2e\x24\x84\xdd\xc9\xce\xec\xce\x60\x13\xdb\x7d\x20\x68\xfa\xe6\x5c\x58\x5a\x33\x74\xce\xb0\xd7\x38\x2b\xa0\x9c\x3a\xc2\x25\x76\xd0\xb9\x24\x96\x56\x2b\xc0\xd3\xbb\xed\x43\xb9\x16\xe6\x54\x76\x89\xbb\xc2\x51\x6a\xea\x6d\x7a\xd9\x10\x4e\xe8\x33\xc1\x0a\xae\x0c\x18\x3a\xa7\xd5\xa8\x54\x88\xce\x86\x3c\x11\x55\x52\x17\x7b\x29\xf5\xeb\xdd\x39\x90\xb4\xe5\xb0\x1a\x6c\x6a\x16\xba\xd6\x78\xc6\x06\x2f\xd8\x60\x8b\xa7\xf1\x56\x1b\xf6\xff\xed\x71\xa3\x84\x2d\x3e\x22\xcb\x4a\x43\x3f\xc0\x7e\xe5\x9a\x6e\xea\xb9\x6f\xd8\xaf\x67\xbe\x44\x39\xf6\xc9\x11\xf4\x05\xa0\xa1\xa7\xbb\x2a\x98\x87\x58\xc4\xac\xa7\xca\x6c\x7e\x07\x1d\xeb\xce\x1c\xfb\x64\xf6\x21\xba\xcf\x25\xba\x6a\x9b\xb0\xec\xd3\x04\x65\xc9\xc5\x8a\x23\x53\x48\xac\xb8\xd3\x15\x7a\x71\xa2\x42\x48\xaa\x95\xc6\x4b\x36\x87\x98\x8b\xd8\x23\x65\xec\x50\x52\x4f\xaa\x9a\x69\xdb\x79\x4b\xc0\xab\x3d\xd2\x1f\x0f\xc9\x60\xd8\x8f\x8f\x93\x2f\xc0\xa8\x46\xf5\x13\x00\x00\xff\xff\x34\x1c\x3e\x7a\x18\x02\x00\x00")

func templatesVpcTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesVpcTf,
		"templates/vpc.tf",
	)
}

func templatesVpcTf() (*asset, error) {
	bytes, err := templatesVpcTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/vpc.tf", size: 536, mode: os.FileMode(480), modTime: time.Unix(1513714897, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/base.tf": templatesBaseTf,
	"templates/cf_dns.tf": templatesCf_dnsTf,
	"templates/cf_lb.tf": templatesCf_lbTf,
	"templates/concourse_lb.tf": templatesConcourse_lbTf,
	"templates/iso_segments.tf": templatesIso_segmentsTf,
	"templates/lb_subnet.tf": templatesLb_subnetTf,
	"templates/ssl_certificate.tf": templatesSsl_certificateTf,
	"templates/vpc.tf": templatesVpcTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"base.tf": &bintree{templatesBaseTf, map[string]*bintree{}},
		"cf_dns.tf": &bintree{templatesCf_dnsTf, map[string]*bintree{}},
		"cf_lb.tf": &bintree{templatesCf_lbTf, map[string]*bintree{}},
		"concourse_lb.tf": &bintree{templatesConcourse_lbTf, map[string]*bintree{}},
		"iso_segments.tf": &bintree{templatesIso_segmentsTf, map[string]*bintree{}},
		"lb_subnet.tf": &bintree{templatesLb_subnetTf, map[string]*bintree{}},
		"ssl_certificate.tf": &bintree{templatesSsl_certificateTf, map[string]*bintree{}},
		"vpc.tf": &bintree{templatesVpcTf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

